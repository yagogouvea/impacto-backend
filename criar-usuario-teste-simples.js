const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Todas as permiss√µes dispon√≠veis no sistema
const TODAS_PERMISSOES = [
  'access:dashboard',
  'access:ocorrencias',
  'access:prestadores',
  'prestadores:export',
  'prestadores:create',
  'prestadores:edit',
  'prestadores:delete',
  'access:financeiro',
  'access:clientes',
  'clientes:create',
  'clientes:edit',
  'clientes:delete',
  'access:relatorios',
  'access:usuarios',
  'usuarios:create',
  'usuarios:edit',
  'usuarios:delete'
];

async function criarUsuarioTeste() {
  try {
    console.log('üöÄ Criando usu√°rio teste...');

    // Verificar se o usu√°rio j√° existe
    const usuarioExistente = await prisma.user.findUnique({
      where: { email: 'teste@teste' }
    });

    if (usuarioExistente) {
      console.log('‚ö†Ô∏è  Usu√°rio teste@teste j√° existe. Atualizando permiss√µes...');
      
      // Atualizar permiss√µes do usu√°rio existente
      await prisma.user.update({
        where: { email: 'teste@teste' },
        data: {
          permissions: TODAS_PERMISSOES,
          role: 'admin',
          active: true
        }
      });
      
      console.log('‚úÖ Usu√°rio teste atualizado com todas as permiss√µes!');
    } else {
      // Criar novo usu√°rio (sem hash de senha por enquanto)
      const novoUsuario = await prisma.user.create({
        data: {
          name: 'Usu√°rio Teste',
          email: 'teste@teste',
          passwordHash: 'temp_hash_123456', // Hash tempor√°rio
          role: 'admin',
          permissions: TODAS_PERMISSOES,
          active: true
        }
      });

      console.log('‚úÖ Usu√°rio teste criado com sucesso!');
      console.log('üìß Email: teste@teste');
      console.log('üîë Senha: 123456 (hash tempor√°rio)');
      console.log('üë§ Role: admin');
      console.log('üîê Permiss√µes: Todas (' + TODAS_PERMISSOES.length + ' permiss√µes)');
    }

    // Listar todas as permiss√µes atribu√≠das
    console.log('\nüìã Permiss√µes atribu√≠das:');
    TODAS_PERMISSOES.forEach((permissao, index) => {
      console.log(`   ${index + 1}. ${permissao}`);
    });

    console.log('\n‚ö†Ô∏è  IMPORTANTE: Voc√™ precisar√° atualizar a senha usando o sistema de autentica√ß√£o do backend!');

  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar fun√ß√£o
criarUsuarioTeste();

