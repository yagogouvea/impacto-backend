#!/usr/bin/env node
/**
 * Script para criar usu√°rio com todas as permiss√µes
 * Execute: node criar-usuario-completo.js
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

// Carregar vari√°veis de ambiente
require('dotenv').config();

const prisma = new PrismaClient();

// Todas as permiss√µes dispon√≠veis no sistema (formato correto)
const TODAS_PERMISSOES = [
  // Acesso √†s p√°ginas
  'access:dashboard',
  'access:ocorrencias',
  'access:prestadores',
  'access:financeiro',
  'access:clientes',
  'access:relatorios',
  'access:usuarios',
  
  // Funcionalidades de prestadores
  'prestadores:export',
  'prestadores:create',
  'prestadores:edit',
  'prestadores:delete',
  
  // Funcionalidades de clientes
  'clientes:create',
  'clientes:edit',
  'clientes:delete',
  
  // Funcionalidades de usu√°rios (formato correto)
  'create:usuarios',
  'update:usuarios',
  'delete:usuarios',
  
  // Permiss√µes adicionais para compatibilidade
  'create:user',
  'read:user',
  'update:user',
  'delete:user',
  'create:client',
  'read:client',
  'update:client',
  'delete:client',
  'create:ocorrencia',
  'read:ocorrencia',
  'update:ocorrencia',
  'delete:ocorrencia',
  'create:prestador',
  'read:prestador',
  'update:prestador',
  'delete:prestador',
  'create:contrato',
  'read:contrato',
  'update:contrato',
  'delete:contrato',
  'create:relatorio',
  'read:relatorio',
  'update:relatorio',
  'delete:relatorio',
  'read:dashboard',
  'create:foto',
  'read:foto',
  'update:foto',
  'delete:foto',
  'upload:foto',
  'create:veiculo',
  'read:veiculo',
  'update:veiculo',
  'delete:veiculo',
  'create:rastreamento',
  'read:rastreamento',
  'update:rastreamento',
  'delete:rastreamento',
  'create:pagamento',
  'read:pagamento',
  'update:pagamento',
  'delete:pagamento',
  'create:checklist',
  'read:checklist',
  'update:checklist',
  'delete:checklist',
  'create:apoio',
  'read:apoio',
  'update:apoio',
  'delete:apoio'
];

async function criarUsuarioCompleto() {
  try {
    console.log('üöÄ Criando usu√°rio com todas as permiss√µes - Cliente Impacto...');
    console.log('üìä DATABASE_URL:', process.env.DATABASE_URL ? 'Definida' : 'N√£o definida');

    // 1. Verificar conex√£o com banco
    console.log('üì° Verificando conex√£o com banco de dados...');
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco estabelecida!');

    // 2. Criar usu√°rio com todas as permiss√µes
    console.log('üë§ Criando usu√°rio com todas as permiss√µes...');
    
    const emailUsuario = 'admin@impactopr.seg.br';
    const senhaUsuario = '123456';
    const nomeUsuario = 'Admin Impacto - Usu√°rio Completo';
    
    // Verificar se o usu√°rio j√° existe
    const usuarioExistente = await prisma.user.findUnique({
      where: { email: emailUsuario }
    });

    if (usuarioExistente) {
      console.log('‚ö†Ô∏è Usu√°rio j√° existe, atualizando permiss√µes...');
      
      // Atualizar permiss√µes do usu√°rio existente
      const usuarioAtualizado = await prisma.user.update({
        where: { email: emailUsuario },
        data: {
          permissions: TODAS_PERMISSOES,
          active: true
        }
      });
      
      console.log('‚úÖ Usu√°rio atualizado com sucesso!');
      console.log('üìã Detalhes do usu√°rio:');
      console.log(`   ID: ${usuarioAtualizado.id}`);
      console.log(`   Nome: ${usuarioAtualizado.name}`);
      console.log(`   Email: ${usuarioAtualizado.email}`);
      console.log(`   Role: ${usuarioAtualizado.role}`);
      console.log(`   Ativo: ${usuarioAtualizado.active}`);
      console.log(`   Total de permiss√µes: ${TODAS_PERMISSOES.length}`);
      
    } else {
      console.log('üÜï Criando novo usu√°rio...');
      
      const senhaHash = await bcrypt.hash(senhaUsuario, 12);
      
      const usuario = await prisma.user.create({
        data: {
          name: nomeUsuario,
          email: emailUsuario,
          passwordHash: senhaHash,
          role: 'admin',
          permissions: TODAS_PERMISSOES,
          active: true
        }
      });
      
      console.log('‚úÖ Usu√°rio criado com sucesso!');
      console.log('üìã Detalhes do usu√°rio:');
      console.log(`   ID: ${usuario.id}`);
      console.log(`   Nome: ${usuario.name}`);
      console.log(`   Email: ${usuario.email}`);
      console.log(`   Role: ${usuario.role}`);
      console.log(`   Ativo: ${usuario.active}`);
      console.log(`   Total de permiss√µes: ${TODAS_PERMISSOES.length}`);
    }

    // 3. Verificar permiss√µes criadas
    console.log('\nüìã Permiss√µes atribu√≠das:');
    console.log('   Total de permiss√µes:', TODAS_PERMISSOES.length);
    console.log('');
    
    // Agrupar permiss√µes por categoria
    const permissoesPorCategoria = {
      'Acesso √†s P√°ginas': TODAS_PERMISSOES.filter(p => p.startsWith('access:')),
      'Funcionalidades de Prestadores': TODAS_PERMISSOES.filter(p => p.startsWith('prestadores:')),
      'Funcionalidades de Clientes': TODAS_PERMISSOES.filter(p => p.startsWith('clientes:')),
      'Funcionalidades de Usu√°rios': TODAS_PERMISSOES.filter(p => p.includes('usuarios') || p.includes('user')),
      'Outras Funcionalidades': TODAS_PERMISSOES.filter(p => 
        !p.startsWith('access:') && 
        !p.startsWith('prestadores:') && 
        !p.startsWith('clientes:') && 
        !p.includes('usuarios') && 
        !p.includes('user')
      )
    };
    
    Object.entries(permissoesPorCategoria).forEach(([categoria, permissoes]) => {
      if (permissoes.length > 0) {
        console.log(`   ${categoria}: ${permissoes.length} permiss√µes`);
        permissoes.forEach(perm => console.log(`     ‚úÖ ${perm}`));
        console.log('');
      }
    });

    // 4. Resumo final
    console.log('üéâ Usu√°rio configurado com sucesso!');
    console.log('\nüîë Credenciais de Login:');
    console.log(`   Email: ${emailUsuario}`);
    console.log(`   Senha: ${senhaUsuario}`);
    console.log('\n‚ö†Ô∏è IMPORTANTE: Altere a senha ap√≥s o primeiro login!');
    console.log('\nüåê URLs de produ√ß√£o:');
    console.log('   Frontend: https://painel.impactopr.seg.br');
    console.log('   API: https://api.impactopr.seg.br');
    console.log('   Prestadores: https://prestador.impactopr.seg.br');

  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error);
    
    if (error.code === 'P1001') {
      console.log('\nüí° Dica: Verifique se a URL do banco de dados est√° correta');
    }
    
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  criarUsuarioCompleto();
}

module.exports = { criarUsuarioCompleto };
